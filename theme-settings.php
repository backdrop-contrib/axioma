<?php
/**
 * @file
 * Theme settings file for Axioma.
 */

require_once('theme-settings.inc');

// Create form for color module settings.
if (module_exists('color')) {
  $form['color_set'] = array(
    '#type' => 'fieldset',
    '#title' => t('Color settings'),
    '#collapsible' => TRUE,
  );
  $fields = array(
    'background' => t('Site\'s background color.'),
    'base'       => t('Color for text and most visible elements.'),
    'accent'     => t('Color for titles, active menu items and link hover state.'),
    'menu_bg'    => t('Color for mobile and dropdown menus.'),
    'hero_font'  => t('Color for hero block text.'),
    'alert'      => t('Color for elements and buttons that require user attention.'),
  );
  foreach ($fields as $field => $tip) {
    $form['color_set'][$field] = color_get_color_element($form['theme']['#value'], $field, $form);
    $form['color_set'][$field]['#attributes'] += array('title' => $tip);
  }

  $form['save_info'] = array(
    '#markup' => t('For the options located below changes will not be updated in the preview until applied. Press <em>Save theme settings</em> to see the effect.'),
    '#prefix' => '<div class="description">',
    '#suffix' => '</div>',
  );
}
else {
  $form['color_set'] = array(
    '#markup' => '<p>' . t('This theme supports custom color palettes if the Color module is enabled on the <a href="!url">modules page</a>. Enable the Color module to customize this theme.', array('!url' => url('admin/modules'))) . '</p>',
  );
}

// Create form for header menu settings.
$form['header_menu'] = array(
  '#type' => 'fieldset',//'vertical_tabs',
  '#title' => t('Header menu'),
  '#collapsible' => TRUE,
  '#collapsed' => TRUE,
);

$form['header_menu']['info'] = array(
  '#markup' => t('Configure menu that is located in a header block. To add or remove menu in a header, go to <em><a href="@link" target="_blank">Layouts</a> >> Manage blocks</em>.', array('@link' => url('admin/structure/layouts'))),
  '#prefix' => '<div class="description">',
  '#suffix' => '</div>',
);

$menu_settings = get_header_menu_config();
module_load_include('inc', 'system', 'system.menu');
$form_menu = system_menu_block_form($menu_settings);
// Remove rudimentary menu_name field generated by the system block form.
// Menu name is taken from header block so there is no need of that field.
unset($form_menu['menu_name']);
// 'Expand all' is only used by dropdown style and is always on.
unset($form_menu['expand_all']);
// Remove 'Hierarchical tree' style option.
unset($form_menu['style']['#options']['tree']);
// 'Hierarchical tree' style is excluded so no need of 'level' setting.
unset($form_menu['level']);
// Toggle is always on for the header menu.
unset($form_menu['toggle']);
// Hide 'Depth' and 'Clickdown' options if 'Top level only' is set.
$state = array(
  'invisible' => array('select[id="edit-style"]' => array('value' => 'top_only'))
);
$form_menu['depth']['#states'] = $state;
$form_menu['clickdown']['#states'] = $state;

$form_menu['header_menu_sticky'] = array(
  '#title' => t('Sticky menu'),
  '#type' => 'checkbox',
  '#default_value' => theme_get_setting('header_menu_sticky', 'axioma') ? 1 : 0,
  '#description' => t('If enabled, header menu in desktop mode will stay at the top of the screen when page is scrolled down. On mobile devices this behaviour is always on.'),
);

// Add menu options form to the theme settings form.
$form['header_menu']['menu'] = $form_menu;

// Create form for menu blocks settings.
$form['menu_blocks'] = array(
  '#type' => 'fieldset',
  '#title' => t('Menu block alignment'),
  '#collapsible' => TRUE,
  '#collapsed' => TRUE,
);

$form['menu_blocks']['info'] = array(
  '#markup' => t('Adjust menu position withing a <a href="@link" target="_blank">layout</a> region.', array('@link' => url('admin/structure/layouts'))),
  '#prefix' => '<div class="description">',
  '#suffix' => '</div>',
);

$options = array(
  'left'   => t('Left') . '&nbsp;&nbsp;',
  'center' => t('Center') . '&nbsp;&nbsp;',
  'right'  => t('Right'),
);

$form['menu_blocks']['align_main_menu'] = array(
  '#title' => layout_get_block_info('system', 'main-menu')['info'],
  '#type' => 'radios',
  '#options' => $options,
  '#default_value' => get_alighnment_setting('align_main_menu'),
  '#attributes' => array('class' => array('container-inline')),
);

$form['menu_blocks']['align_management'] = array(
  '#title' => layout_get_block_info('system', 'management')['info'],
  '#type' => 'radios',
  '#options' => $options,
  '#default_value' => get_alighnment_setting('align_management'),
  '#attributes' => array('class' => array('container-inline')),
);

$form['menu_blocks']['align_user_menu'] = array(
  '#title' => layout_get_block_info('system', 'user-menu')['info'],
  '#type' => 'radios',
  '#options' => $options,
  '#default_value' => get_alighnment_setting('align_user_menu'),
  '#attributes' => array('class' => array('container-inline')),
);

// Create form for thin font option.
$form['font_thin'] = array(
  '#title' => t('Use lighter font'),
  '#type' => 'checkbox',
  '#default_value' => theme_get_setting('font_thin', 'axioma') ? 1:0,
  '#description' => t('Lighter font may match better to dark color schemes.'),
);

// Create form for thin font option.
$form['hero_art'] = array(
  '#title' => t('Hide hero block art'),
  '#type' => 'checkbox',
  '#default_value' => theme_get_setting('hero_art', 'axioma') ? 1:0,
  '#description' => t('Removes theme provided hero block background texture.'),
);
